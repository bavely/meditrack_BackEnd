// This is your Prisma schema file,
// learn more about it in the docs: [https://pris.ly/d/prisma-schema](https://pris.ly/d/prisma-schema)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum RepeatPattern {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum DoseActionType {
  TAKEN
  SKIPPED
  MISSED
}

enum NotificationChannel {
  PUSH
  SMS
}

model User {
  id                      String    @id @default(uuid()) // Auth provider sub
  aud                     String // User audit (e.g. "authenticated")
  role                    String // e.g. "authenticated"
  email                   String    @unique
  password                String // hashed password, null if using OAuth
  name                    String?
  gender                  String
  dob                     DateTime
  phoneNumber             String?
  prefersPush             Boolean   @default(true)
  prefersSms              Boolean   @default(false)
  timezone                String    @default("UTC") // timestamp when confirmation email sent
  lastSignInAt            DateTime? // last login time
  emailVerified           Boolean   @default(false)
  phoneVerified           Boolean   @default(false)
  emailConfirmedAt        DateTime? // timestamp when email confirmed
  confirmationSentAt      DateTime?
  phoneConfirmedAt        DateTime?
  phoneConfirmationSentAt DateTime?
  appMetadata             Json? // arbitrary JSON metadata
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  medications         Medication[]
  notifications       NotificationLog[]
  doseActions         DoseAction[]
  refreshTokens       RefreshToken[] // one-to-many
  emailVerifications  EmailVerificationToken[]
  passwordResetTokens PasswordResetToken[]
}

model Medication {
  id            String            @id @default(uuid())
  userId        String
  name          String
  dosage        String  // e.g. "500mg", "1 tablet" or "5 ml" etc.
  quantity      Int
  instructions  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  therapy       String?
  user          User              @relation(fields: [userId], references: [id])
  schedule      Schedule?
  doseActions   DoseAction[]
  notifications NotificationLog[]
}

model Schedule {
  id            String        @id @default(uuid())
  medicationId  String        @unique
  repeatPattern RepeatPattern @default(DAILY)
  times         String[] // e.g. ["08:00", "20:00"]
  startDate     DateTime
  durationDays  Int // total days or 0 for indefinite
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  medication Medication @relation(fields: [medicationId], references: [id])
}

model DoseAction {
  id           String         @id @default(uuid())
  userId       String
  medicationId String
  actionType   DoseActionType
  actionTime   DateTime
  snoozedUntil DateTime?
  createdAt    DateTime       @default(now())

  user       User       @relation(fields: [userId], references: [id])
  medication Medication @relation(fields: [medicationId], references: [id])
}

model NotificationLog {
  id            String              @id @default(uuid())
  userId        String
  medicationId  String?
  scheduledTime DateTime
  sentTime      DateTime?
  channel       NotificationChannel
  successful    Boolean             @default(false)
  errorMessage  String?
  createdAt     DateTime            @default(now())

  user       User        @relation(fields: [userId], references: [id])
  medication Medication? @relation(fields: [medicationId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}
