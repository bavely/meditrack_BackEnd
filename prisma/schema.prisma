// This is your Prisma schema file,
// learn more about it in the docs: [https://pris.ly/d/prisma-schema](https://pris.ly/d/prisma-schema)

generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

model User {
id                   String   @id @default(uuid())                                      // Auth provider sub
aud                  String                                                     // User audit (e.g. "authenticated")
role                 String                                                     // e.g. "authenticated"
email                String   @unique
password             String                                                // hashed password, null if using OAuth
name                 String?
phoneNumber          String?
pushToken            String?
prefersPush          Boolean  @default(true)
prefersSms           Boolean  @default(false)
timezone             String   @default("UTC")
emailConfirmedAt     DateTime?                                                // timestamp when email confirmed
confirmationSentAt   DateTime?                                                // timestamp when confirmation email sent
lastSignInAt         DateTime?                                                // last login time
emailVerified        Boolean  @default(false)
phoneVerified        Boolean  @default(false)
appMetadata          Json?                                                    // arbitrary JSON metadata
createdAt            DateTime @default(now())
updatedAt            DateTime @updatedAt

medications          Medication[]
notifications        NotificationLog[]
doseActions          DoseAction[]
refreshTokens        RefreshToken[]                                          // one-to-many
emailVerifications   EmailVerificationToken[]
passwordResetTokens  PasswordResetToken[]
}

model Medication {
id           String   @id @default(uuid())
name         String
dosage       String
quantity     Int
scheduleTime DateTime
durationDays Int
userId       String
instructions String?
createdAt    DateTime @default(now())

user         User     @relation(fields: [userId], references: [id])
}

model NotificationLog {
id           String   @id @default(uuid())
userId       String
medicationId String
message      String
channel      String
deliveredAt  DateTime @default(now())
openedAt     DateTime?

user         User     @relation(fields: [userId], references: [id])
}

model DoseAction {
id           String   @id @default(uuid())
userId       String
medicationId String
takenAt      DateTime?
snoozedUntil DateTime?
createdAt    DateTime @default(now())

user         User     @relation(fields: [userId], references: [id])
}

/// Stores long-lived refresh tokens for issuing new access tokens
model RefreshToken {
id         String   @id @default(uuid())
userId     String
token      String   @unique
expiresAt  DateTime
createdAt  DateTime @default(now())
revoked    Boolean  @default(false)

user       User     @relation(fields: [userId], references: [id])
}

/// One-time email verification tokens
model EmailVerificationToken {
id         String   @id @default(uuid())
userId     String
token      String   @unique
expiresAt  DateTime
createdAt  DateTime @default(now())
used       Boolean  @default(false)

user       User     @relation(fields: [userId], references: [id])
}

/// One-time password reset tokens
model PasswordResetToken {
id         String   @id @default(uuid())
userId     String
token      String   @unique
expiresAt  DateTime
createdAt  DateTime @default(now())
used       Boolean  @default(false)

user       User     @relation(fields: [userId], references: [id])
}
