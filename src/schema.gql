# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FieldError {
  field: String!
  message: String!
}

type RefreshPayload {
  accessToken: String!
}

type RefreshResponse {
  success: Boolean!
  errors: [FieldError!]!
  data: RefreshPayload
}

type User {
  id: ID!
  aud: String!
  role: String!
  email: String!
  name: String
  phoneNumber: String
  prefersPush: Boolean!
  prefersSms: Boolean!
  timezone: String!
  lastSignInAt: DateTime
  emailVerified: Boolean!
  phoneVerified: Boolean!
  emailConfirmedAt: DateTime
  confirmationSentAt: DateTime
  phoneConfirmedAt: DateTime
  phoneConfirmationSentAt: DateTime
  gender: String!
  dob: DateTime!
  appMetadata: JSONObject
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type LoginResponse {
  accessToken: String!
  refreshToken: String!

  """Logged-in user object"""
  user: User
}

type AuthResponse {
  success: Boolean!
  errors: [FieldError!]!
  data: LoginResponse
}

type VerificationsPayload {
  message: String!
}

type VerificationsResponse {
  success: Boolean!
  errors: [FieldError!]!
  data: VerificationsPayload
}

type UserResponse {
  success: Boolean!
  errors: [FieldError!]!
  data: User
}

type ParsedLabel {
  name: String!
  dosage: String!
  quantity: String!
  instructions: String!
  therapy: String!
}

type ParselabelResponse {
  success: Boolean!
  errors: [FieldError!]!
  data: ParsedLabel
}

type ParseMedicationLabelMultipleOutput {
  name: String!
  dosage: String!
  quantity: Float
  instructions: String
  therapy: String
}

type ParseResponse {
  success: Boolean!
  errors: [FieldError!]!
  data: ParseMedicationLabelMultipleOutput
}

type Query {
  getUser: UserResponse!
}

type Mutation {
  registerUser(input: CreateUserInput!): AuthResponse!
  login(email: String!, password: String!): AuthResponse!
  refreshToken(refreshToken: String!): RefreshResponse!
  verifyEmail(token: String!): VerificationsResponse!
  resendVerificationEmail(token: String!): VerificationsResponse!
  forgotPassword(email: String!): VerificationsResponse!
  resetPassword(token: String!, password: String!): VerificationsResponse!
  parseMedicationLabel(label: String!): ParselabelResponse!
  parseMedicationLabelMultiple(input: [Upload!]!): ParseResponse!
}

input CreateUserInput {
  aud: String!
  role: String!
  email: String!
  name: String
  phoneNumber: String
  password: String!
  confirmationSentAt: DateTime
  gender: String!
  dob: DateTime!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload